{"version":3,"sources":["components/PlayersDisplay.js","components/Footer.js","components/Instructions.js","containers/CharacterSelection.js","containers/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["PlayersDisplay","players","getPlayerRace","onIntroScreen","className","map","player","key","number","style","textAlign","textDecoration","src","character","alt","fontFamily","score","Footer","class","role","aria-label","color","href","Instructions","state","characters","tiles","onClose","event","props","this","displayInstruction","justifyContent","alignItems","width","height","tile","onClick","Component","CharacterSelection","Dragon","Humanoid","currentPlayerNumber","readyToStart","setPlayer","setState","prevState","startGame","GameBoard","boardSideSize","diceThrow","choice","Math","floor","random","diceDisplay","movePlayer","tileGenerator","row_index","col_index","type","index","boardTiles","length","push","traversalPathLength","positions","position","gridTemplateRows","gridTemplateColumns","gridRow","gridColumn","transition","points","currentPlayer","App","gameStarted","toggleInstruction","find","landingTile","increaseScore","max","gameOver","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f17babf2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst PlayersDisplay = ({ players, getPlayerRace, onIntroScreen }) => (\n  <div className=\"players\">\n    {players.map((player) => (\n      <div key={player.number}>\n        <h3 style={{ textAlign: \"center\" }}>\n          {getPlayerRace(player.number)} Hero\n        </h3>\n        {onIntroScreen === true ? (\n          <button\n            className=\"character character-display\"\n            style={{ textDecoration: \"none\" }}\n          >\n            <img\n              className=\"character-image\"\n              src={`./characters/${player.character}.png`}\n              alt={player.character}\n            />\n            <div style={{ textAlign: \"center\", fontFamily: \"Space Mono\" }}>\n              {player.character}\n            </div>\n            <p className=\"player-score\">{player.score}</p>\n          </button>\n        ) : (\n          <button\n            className=\"character character-intro\"\n            style={{ textDecoration: \"none\" }}\n          >\n            <img\n              className=\"character-image\"\n              src={`./characters/${player.character}.png`}\n              alt={player.character}\n            />\n            <div style={{ textAlign: \"center\", fontFamily: \"Space Mono\" }}>\n              {player.character}\n            </div>\n            <p className=\"player-score\">{player.score}</p>\n          </button>\n        )}\n      </div>\n    ))}\n  </div>\n);\n\nexport default PlayersDisplay;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div class=\"footer\">\n      <h5>\n        Created with{\" \"}\n        <span role=\"img\" aria-label=\"heart\">\n          ❤️\n        </span>{\" \"}\n        by{\" \"}\n        <a style={{ color: \"white\" }} href=\"https://www.adityavsingh.com/\">\n          Aditya Vikram Singh\n        </a>\n        , 2020\n      </h5>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\n\nclass Instructions extends Component {\n  state = {\n    characters: [\n      \"Ancient Wizard\",\n      \"Mighty Knight\",\n      \"Stealthy Rogue\",\n      \"Baneful Blue Dragon\",\n      \"Fiery Red Dragon\",\n      \"Noxious Green Dragon\",\n    ],\n    tiles: [\n      \"Mythic Kingdom of Friendship\",\n      \"Ancient Wizard\",\n      \"Mighty Knight\",\n      \"Stealthy Rogue\",\n      \"Baneful Blue Dragon\",\n      \"Fiery Red Dragon\",\n      \"Noxious Green Dragon\",\n      \"Fields of Destiny\",\n    ],\n  };\n\n  onClose = (event) => {\n    this.props.onClose(event);\n  };\n  render() {\n    if (!this.props.displayInstruction) {\n      return null;\n    }\n    return (\n      <div class=\"instructions\">\n        <h2 style={{ textAlign: \"center\" }}>Game Instructions</h2>\n        <br />\n        <br />\n        <div class=\"content\">\n          <ul\n            style={{\n              textAlign: \"center\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            {this.state.characters.map((character) => (\n              <img\n                className=\"character\"\n                src={`./characters/${character}.png`}\n                width=\"75px\"\n                height=\"auto\"\n                alt={character}\n              />\n            ))}\n          </ul>\n          <ul\n            style={{\n              textAlign: \"center\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            {this.state.tiles.map((tile) => (\n              <img\n                className=\"character\"\n                src={`./tiles/${tile}.jpg`}\n                width=\"75px\"\n                height=\"auto\"\n                alt={tile}\n              />\n            ))}\n          </ul>\n          <ul>\n            <li>The first player chooses a Humanoid character.</li>\n            <li>The second player chooses a Dragon character.</li>\n            <li>\n              The Board appears, and Humanoid character begins by rolling a die!\n            </li>\n            <li>\n              The player moves ahead the same number of tiles as the number on\n              the die.\n              <ul>\n                <li>\n                  If the player lands on their own tile, then their score is\n                  incremented by 3.\n                </li>\n                <li>\n                  If the player lands on their opponent's tile, then their score\n                  is decremented by 1.\n                </li>\n                <li>\n                  If the player lands on Fields of Destiny, they have an equal\n                  chance of gaining or losing 2 points.\n                </li>\n                <li>\n                  If the player lands on Mythic Kingdom of Friendship (start),\n                  the player's score is not affected.\n                </li>\n              </ul>\n            </li>\n            <li>The first player to reach 20 points wins the game!</li>\n          </ul>\n        </div>\n        <br />\n        <br />\n        <div>\n          <button class=\"inverted-button\" onClick={this.onClose}>\n            Close Instructions\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Instructions;\n","import React, { Component, Fragment } from \"react\";\nimport PlayersDisplay from \"../components/PlayersDisplay\";\n\nclass CharacterSelection extends Component {\n  state = {\n    characters: {\n      Dragon: [\n        \"Baneful Blue Dragon\",\n        \"Fiery Red Dragon\",\n        \"Noxious Green Dragon\",\n      ],\n      Humanoid: [\"Ancient Wizard\", \"Mighty Knight\", \"Stealthy Rogue\"],\n    },\n    currentPlayerNumber: 1,\n    players: [],\n    readyToStart: false,\n  };\n\n  setPlayer = (character) => {\n    this.setState((prevState) => ({\n      currentPlayerNumber: prevState.currentPlayerNumber + 1,\n      players: [\n        ...prevState.players,\n        { number: prevState.currentPlayerNumber, character },\n      ],\n      readyToStart: prevState.currentPlayerNumber === 2 ? true : false,\n    }));\n  };\n\n  getPlayerRace = (currentPlayerNumber) =>\n    currentPlayerNumber === 1 ? \"Humanoid\" : \"Dragon\";\n\n  startGame = () => {\n    this.props.startGame(this.state.players);\n  };\n\n  render() {\n    return (\n      <div>\n        <PlayersDisplay\n          players={this.state.players}\n          getPlayerRace={this.getPlayerRace}\n          onIntroScreen={true}\n        />\n        {this.state.readyToStart ? (\n          <Fragment>\n            <button onClick={this.startGame} className=\"button\">\n              Start Game\n            </button>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <h1 style={{ textAlign: \"center\" }}>\n              {this.getPlayerRace(this.state.currentPlayerNumber)} race, choose\n              your hero:\n            </h1>\n            {this.state.characters[\n              this.getPlayerRace(this.state.currentPlayerNumber)\n            ].map((character) => (\n              <button\n                className=\"character\"\n                onClick={() => this.setPlayer(character)}\n                style={{ textDecoration: \"none\" }}\n                key={character}\n              >\n                <img\n                  className=\"character-image\"\n                  src={`./characters/${character}.png`}\n                  alt={character}\n                />\n                <div style={{ textAlign: \"center\" }}>{character}</div>\n              </button>\n            ))}\n          </Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default CharacterSelection;\n","import React, { Component } from \"react\";\n\nclass GameBoard extends Component {\n  state = {\n    // Side length of Board as 11 units ensures a total of 40 traversable tiles.\n    boardSideSize: 8,\n    // Array to hold tile objects\n    tiles: [],\n  };\n\n  componentDidMount() {\n    // Assign the tiles generated to array\n    const tiles = this.tileGenerator();\n    // Update the state with newly assigned tiles\n    this.setState({\n      tiles,\n    });\n  }\n\n  tileGenerator() {\n    // Destructuring construct to obtain Humanoid and Dragon characters from props\n    const {\n      players: [Humanoid, Dragon],\n    } = this.props;\n    // Initializing board tiles with starting tile\n    const tiles = [\n      {\n        row_index: 1,\n        col_index: 1,\n        type: \"Start\",\n      },\n    ];\n    // Destructuring construct to obtain length of board from state\n    const { boardSideSize } = this.state;\n    // Array-based group assignment for index, row_index and col_index from tile right after the starting one\n    let [index, row_index, col_index] = [1, 1, 2];\n    // Calculating total number of corner and edge tiles on board using 4*(side-1) rule\n    const boardTiles = 4 * (boardSideSize - 1);\n    // Loop for traversing through the tiles and adding them to tiles array\n    while (tiles.length < boardTiles) {\n      // Generated tile from indices\n      const tile = {\n        row_index,\n        col_index,\n      };\n\n      // Assignment of the type of tile based on equal distribution of all three kinds of tiles among 39 tiles (13 of each kind)\n      tile.type =\n        index % 3 === 0\n          ? \"Fields of Destiny\"\n          : index % 3 === 1\n          ? Humanoid.character\n          : Dragon.character;\n\n      // Finally push the new tile to array of tiles\n      tiles.push(tile);\n      // Increment the index for while loop\n      ++index;\n      // Travel path would be boardSideSize - 1 as it would reach corner and turn\n      const traversalPathLength = boardSideSize - 1;\n      // Based on index, change the row_index and col_index\n      if (index <= traversalPathLength) {\n        ++col_index;\n      } else if (index <= 2 * traversalPathLength) {\n        ++row_index;\n      } else if (index <= 3 * traversalPathLength) {\n        --col_index;\n      } else {\n        --row_index;\n      }\n    }\n\n    // Return the array of tiles after complete generation\n    return tiles;\n  }\n\n  diceThrow = () => {\n    const choice = Math.floor(6 * Math.random()) + 1;\n    const diceDisplay = choice;\n    this.setState({\n      diceDisplay,\n    });\n    this.props.movePlayer(choice, this.state.tiles);\n  };\n\n  render() {\n    const { boardSideSize } = this.state;\n    let positions = [];\n    if (this.state.tiles.length > 0) {\n      positions = this.props.players.map(\n        (player) => this.state.tiles[player.position % this.state.tiles.length]\n      );\n    }\n    return (\n      <div\n        className=\"game-board\"\n        style={{\n          gridTemplateRows: `repeat(${boardSideSize}, 1fr)`,\n          gridTemplateColumns: `repeat(${boardSideSize}, 1fr)`,\n        }}\n      >\n        {this.state.tiles.map((tile, index) => (\n          <div\n            className=\"game-tile\"\n            style={{\n              gridRow: tile.row_index,\n              gridColumn: tile.col_index,\n            }}\n            key={index}\n          >\n            {tile.type !== \"Start\" ? (\n              <img alt={tile.type} src={`./tiles/${tile.type}.jpg`} />\n            ) : (\n              <img\n                alt=\"Start\"\n                src={\"./tiles/Mythic Kingdom of Friendship.jpg\"}\n              />\n            )}\n          </div>\n        ))}\n        {positions.map((position, index) => {\n          const player = this.props.players[index];\n          return (\n            <div\n              className=\"player-character\"\n              key={player.number}\n              style={{\n                gridRow: position.row_index,\n                gridColumn: position.col_index,\n                transition: `all 1s`,\n              }}\n            >\n              <img\n                className=\"character-image\"\n                alt={player.number}\n                src={`./characters/${player.character}.png`}\n              />\n            </div>\n          );\n        })}\n        <div className=\"board-center\">\n          {this.props.tile ? (\n            <div\n              style={{\n                textAlign: \"center\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <h3>\n                {this.props.tile.player.character}:{this.props.tile.points}{\" \"}\n                score\n              </h3>\n              <br />\n              <h5>\n                {this.props.tile.player.character} reached\n                <br />\n                {this.props.tile.type}'s stronghold!\n              </h5>\n              <br />\n            </div>\n          ) : (\n            \"\"\n          )}\n          {this.props.tile && this.props.tile.player.score >= 20 ? (\n            <div\n              style={{\n                textAlign: \"center\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <img\n                className=\"character-image\"\n                src={`./characters/${this.props.tile.player.character}.png`}\n                alt={this.props.tile.player.character}\n              />\n              <h3>{this.props.tile.player.character} won!</h3>\n            </div>\n          ) : (\n            <>\n              <h5> {this.props.currentPlayer.character}, roll the dice! 🎲</h5>\n              {this.state.diceDisplay ? (\n                <img\n                  className=\"dice-thrown\"\n                  src={`./dice/${this.state.diceDisplay}.png`}\n                  alt={this.state.diceDisplay}\n                />\n              ) : (\n                \"\"\n              )}\n              <button onClick={this.diceThrow} className=\"button\">\n                Dice Roll!\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameBoard;\n","import React, { Component } from \"react\";\n\nimport PlayersDisplay from \"./components/PlayersDisplay\";\nimport Footer from \"./components/Footer\";\nimport Instructions from \"./components/Instructions\";\n\nimport CharacterSelection from \"./containers/CharacterSelection\";\nimport GameBoard from \"./containers/GameBoard\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    players: [],\n    gameStarted: false,\n    displayInstruction: false,\n    currentPlayer: null,\n    tile: null,\n  };\n\n  toggleInstruction = (event) => {\n    this.setState({\n      displayInstruction: !this.state.displayInstruction,\n    });\n  };\n\n  startGame = (players) => {\n    this.setState({\n      players: players.map((player) => ({\n        ...player,\n        position: 0,\n        score: 0,\n      })),\n      gameStarted: true,\n      currentPlayer: players[0],\n    });\n  };\n\n  movePlayer = (number, tiles) => {\n    this.setState((prevState) => {\n      let currentPlayer = prevState.players.find(\n        (player) => player.number === prevState.currentPlayer.number\n      );\n\n      const position = currentPlayer.position + number;\n      const landingTile = tiles[position % tiles.length];\n      const increaseScore = (function () {\n        if (landingTile.type === currentPlayer.character) {\n          return 3;\n        } else if (landingTile.type === \"Start\") {\n          return 0;\n        } else if (landingTile.type !== \"Fields of Destiny\") {\n          return -1;\n        } else {\n          return Math.floor(2 * Math.random()) === 0 ? 2 : -2;\n        }\n      })();\n\n      currentPlayer = {\n        ...currentPlayer,\n        position: currentPlayer.position + number,\n        score: Math.max(0, currentPlayer.score + increaseScore),\n      };\n\n      const tile = {\n        player: currentPlayer,\n        type: landingTile.type,\n        points: (increaseScore >= 0 ? \"+\" : \"\") + increaseScore,\n      };\n\n      return {\n        tile,\n        players: prevState.players.map((player) =>\n          player.number === prevState.currentPlayer.number\n            ? currentPlayer\n            : player\n        ),\n        currentPlayer:\n          prevState.currentPlayer.number === prevState.players[0].number\n            ? prevState.players[1]\n            : prevState.players[0],\n      };\n    });\n  };\n  render() {\n    return (\n      <>\n        <div class=\"header\">\n          <button\n            onClick={(event) => {\n              this.toggleInstruction(event);\n            }}\n            className=\"inverted-button\"\n          >\n            Instructions\n          </button>\n          <h1>Perpetual Crusades</h1>\n          <a\n            className=\"inverted-button\"\n            style={{ textDecoration: \"none\" }}\n            href=\"\"\n          >\n            Restart Game\n          </a>\n        </div>\n        {this.state.displayInstruction ? (\n          <Instructions\n            onClose={this.toggleInstruction}\n            displayInstruction={this.state.displayInstruction}\n          />\n        ) : (\n          <div className=\"App\">\n            <PlayersDisplay\n              players={this.state.players}\n              getPlayerRace={(currentPlayerNumber) =>\n                currentPlayerNumber === 1 ? \"Humanoid\" : \"Dragon\"\n              }\n              onIntroScreen={false}\n            />\n            {this.state.gameStarted ? (\n              <>\n                <GameBoard\n                  players={this.state.players}\n                  currentPlayer={this.state.currentPlayer}\n                  tile={this.state.tile}\n                  gameOver={this.state.gameOver}\n                  movePlayer={this.movePlayer}\n                />\n              </>\n            ) : (\n              <CharacterSelection startGame={this.startGame} />\n            )}\n          </div>\n        )}\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}