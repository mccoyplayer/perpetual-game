{"version":3,"sources":["components/PlayersDisplay.js","components/Footer.js","components/Instructions.js","containers/CharacterSelection.js","containers/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["PlayersDisplay","players","getPlayerRace","onIntroScreen","className","map","player","key","number","style","textAlign","textDecoration","src","character","alt","fontFamily","score","Footer","class","Instructions","onClose","event","props","this","displayInstruction","onClick","Component","CharacterSelection","state","characters","Draconem","Humanoid","currentPlayerNumber","readyToStart","setPlayer","setState","prevState","startGame","GameBoard","boardSideSize","tiles","diceThrow","choice","Math","floor","random","diceDisplay","movePlayer","tileGenerator","row_index","col_index","type","index","boardTiles","length","tile","push","traversalPathLength","positions","position","gridTemplateRows","gridTemplateColumns","gridRow","gridColumn","transition","points","currentPlayer","App","gameStarted","toggleInstruction","find","landingTile","increaseScore","max","href","gameOver","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eed95adc.chunk.js","sourcesContent":["import React from \"react\";\n\nconst PlayersDisplay = ({ players, getPlayerRace, onIntroScreen }) => (\n  <div className=\"players\">\n    {players.map((player) => (\n      <div key={player.number}>\n        <h3 style={{ textAlign: \"center\" }}>\n          {getPlayerRace(player.number)} Hero\n        </h3>\n        {onIntroScreen === true ? (\n          <button\n            className=\"character character-display\"\n            style={{ textDecoration: \"none\" }}\n          >\n            <img\n              className=\"character-image\"\n              src={`./characters/${player.character}.png`}\n              alt={player.character}\n            />\n            <div style={{ textAlign: \"center\", fontFamily: \"Space Mono\" }}>\n              {player.character}\n            </div>\n            <p className=\"player-score\">{player.score}</p>\n          </button>\n        ) : (\n          <button\n            className=\"character character-intro\"\n            style={{ textDecoration: \"none\" }}\n          >\n            <img\n              className=\"character-image\"\n              src={`./characters/${player.character}.png`}\n              alt={player.character}\n            />\n            <div style={{ textAlign: \"center\", fontFamily: \"Space Mono\" }}>\n              {player.character}\n            </div>\n            <p className=\"player-score\">{player.score}</p>\n          </button>\n        )}\n      </div>\n    ))}\n  </div>\n);\n\nexport default PlayersDisplay;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div class=\"footer\">\n      <h6>Created by Aditya Vikram Singh</h6>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\n\nclass Instructions extends Component {\n  onClose = (event) => {\n    this.props.onClose(event);\n  };\n  render() {\n    if (!this.props.displayInstruction) {\n      return null;\n    }\n    return (\n      <div class=\"instructions\">\n        <h2 style={{ textAlign: \"center\" }}>Game Instructions</h2>\n        <br />\n        <br />\n        <div class=\"content\">\n          <ul>\n            <li>The first player chooses a Humanoid character.</li>\n            <li>The second player chooses a Draconem character.</li>\n            <li>\n              The Board appears, and Humanoid character begins by rolling a die!\n            </li>\n            <li>\n              The player moves ahead the same number of tiles as the number on\n              the die.\n              <ul>\n                <li>\n                  If the player lands on their own tile, then their score is\n                  incremented by 2.\n                </li>\n                <li>\n                  If the player lands on their opponent's tile, then their score\n                  is decremented by 1.\n                </li>\n                <li>\n                  If the player lands on Fields of Destiny, they have an equal\n                  chance of winning a point or forfeiting a point.\n                </li>\n                <li>\n                  If the player lands on Mythic Kingdom of Friendship, the\n                  player's score is not affected.\n                </li>\n              </ul>\n            </li>\n            <li>\n              There is no clear winner in this game (just like there is no\n              victor in war), and you can keep playing till one of the players\n              reach an arbitrary limit on the score, decided before embarking on\n              this quest. A game of 15 points is preferable for short\n              playthroughs.\n            </li>\n          </ul>\n        </div>\n        <br />\n        <br />\n        <div>\n          <button class=\"inverted-button\" onClick={this.onClose}>\n            Close Instructions\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Instructions;\n","import React, { Component, Fragment } from \"react\";\nimport PlayersDisplay from \"../components/PlayersDisplay\";\n\nclass CharacterSelection extends Component {\n  state = {\n    characters: {\n      Draconem: [\n        \"Baneful Blue Dragon\",\n        \"Fiery Red Dragon\",\n        \"Noxious Green Dragon\",\n      ],\n      Humanoid: [\"Ancient Wizard\", \"Mighty Knight\", \"Stealthy Rogue\"],\n    },\n    currentPlayerNumber: 1,\n    players: [],\n    readyToStart: false,\n  };\n\n  setPlayer = (character) => {\n    this.setState((prevState) => ({\n      currentPlayerNumber: prevState.currentPlayerNumber + 1,\n      players: [\n        ...prevState.players,\n        { number: prevState.currentPlayerNumber, character },\n      ],\n      readyToStart: prevState.currentPlayerNumber === 2 ? true : false,\n    }));\n  };\n\n  getPlayerRace = (currentPlayerNumber) =>\n    currentPlayerNumber === 1 ? \"Humanoid\" : \"Draconem\";\n\n  startGame = () => {\n    this.props.startGame(this.state.players);\n  };\n\n  render() {\n    return (\n      <div>\n        <PlayersDisplay\n          players={this.state.players}\n          getPlayerRace={this.getPlayerRace}\n          onIntroScreen={true}\n        />\n        {this.state.readyToStart ? (\n          <Fragment>\n            <button onClick={this.startGame} className=\"button\">\n              Start Game\n            </button>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <h1 style={{ textAlign: \"center\" }}>\n              {this.getPlayerRace(this.state.currentPlayerNumber)} race, choose\n              your hero:\n            </h1>\n            {this.state.characters[\n              this.getPlayerRace(this.state.currentPlayerNumber)\n            ].map((character) => (\n              <button\n                className=\"character\"\n                onClick={() => this.setPlayer(character)}\n                style={{ textDecoration: \"none\" }}\n                key={character}\n              >\n                <img\n                  className=\"character-image\"\n                  src={`./characters/${character}.png`}\n                  alt={character}\n                />\n                <div style={{ textAlign: \"center\" }}>{character}</div>\n              </button>\n            ))}\n          </Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default CharacterSelection;\n","import React, { Component } from \"react\";\n\nclass GameBoard extends Component {\n  state = {\n    // Side length of Board as 11 units ensures a total of 40 traversable tiles.\n    boardSideSize: 8,\n    // Array to hold tile objects\n    tiles: [],\n  };\n\n  componentDidMount() {\n    // Assign the tiles generated to array\n    const tiles = this.tileGenerator();\n    // Update the state with newly assigned tiles\n    this.setState({\n      tiles,\n    });\n  }\n\n  tileGenerator() {\n    // Destructuring construct to obtain Humanoid and Draconem characters from props\n    const {\n      players: [Humanoid, Draconem],\n    } = this.props;\n    // Initializing board tiles with starting tile\n    const tiles = [\n      {\n        row_index: 1,\n        col_index: 1,\n        type: \"Start\",\n      },\n    ];\n    // Destructuring construct to obtain length of board from state\n    const { boardSideSize } = this.state;\n    // Array-based group assignment for index, row_index and col_index from tile right after the starting one\n    let [index, row_index, col_index] = [1, 1, 2];\n    // Calculating total number of corner and edge tiles on board using 4*(side-1) rule\n    const boardTiles = 4 * (boardSideSize - 1);\n    // Loop for traversing through the tiles and adding them to tiles array\n    while (tiles.length < boardTiles) {\n      // Generated tile from indices\n      const tile = {\n        row_index,\n        col_index,\n      };\n\n      // Assignment of the type of tile based on equal distribution of all three kinds of tiles among 39 tiles (13 of each kind)\n      tile.type =\n        index % 3 === 0\n          ? \"Fields of Destiny\"\n          : index % 3 === 1\n          ? Humanoid.character\n          : Draconem.character;\n\n      // Finally push the new tile to array of tiles\n      tiles.push(tile);\n      // Increment the index for while loop\n      ++index;\n      // Travel path would be boardSideSize - 1 as it would reach corner and turn\n      const traversalPathLength = boardSideSize - 1;\n      // Based on index, change the row_index and col_index\n      if (index <= traversalPathLength) {\n        ++col_index;\n      } else if (index <= 2 * traversalPathLength) {\n        ++row_index;\n      } else if (index <= 3 * traversalPathLength) {\n        --col_index;\n      } else {\n        --row_index;\n      }\n    }\n\n    // Return the array of tiles after complete generation\n    return tiles;\n  }\n\n  diceThrow = () => {\n    const dice = [\"⚀\", \"⚁\", \"⚂\", \"⚃\", \"⚄\", \"⚅\"];\n    const choice = Math.floor(6 * Math.random());\n    const diceDisplay = dice[choice];\n    this.setState({\n      diceDisplay,\n    });\n    this.props.movePlayer(choice + 1, this.state.tiles);\n  };\n\n  render() {\n    const { boardSideSize } = this.state;\n    let positions = [];\n    if (this.state.tiles.length > 0) {\n      positions = this.props.players.map(\n        (player) => this.state.tiles[player.position % this.state.tiles.length]\n      );\n    }\n    return (\n      <div\n        className=\"game-board\"\n        style={{\n          gridTemplateRows: `repeat(${boardSideSize}, 1fr)`,\n          gridTemplateColumns: `repeat(${boardSideSize}, 1fr)`,\n        }}\n      >\n        {this.state.tiles.map((tile, index) => (\n          <div\n            className=\"game-tile\"\n            style={{\n              gridRow: tile.row_index,\n              gridColumn: tile.col_index,\n            }}\n            key={index}\n          >\n            {tile.type !== \"Start\" ? (\n              <img alt={tile.type} src={`./tiles/${tile.type}.png`} />\n            ) : (\n              <img\n                alt=\"Start\"\n                src={\"./tiles/Mythic Kingdom of Friendship.png\"}\n              />\n            )}\n          </div>\n        ))}\n        {positions.map((position, index) => {\n          const player = this.props.players[index];\n          return (\n            <div\n              className=\"player-character\"\n              key={player.number}\n              style={{\n                gridRow: position.row_index,\n                gridColumn: position.col_index,\n                transition: `all 1s`,\n              }}\n            >\n              <img\n                className=\"character-image\"\n                alt={player.number}\n                src={`./characters/${player.character}.png`}\n              />\n            </div>\n          );\n        })}\n        <div className=\"board-center\">\n          {this.props.tile ? (\n            <>\n              <h3>\n                {this.props.tile.player.character}:{this.props.tile.points}{\" \"}\n                score\n              </h3>\n              <h5>\n                {this.props.tile.player.character} landed on{\" \"}\n                {this.props.tile.type}!\n              </h5>\n            </>\n          ) : (\n            \"\"\n          )}\n          <h5> {this.props.currentPlayer.character}, roll the dice! 🎲</h5>\n          <p className=\"dice-thrown\">{this.state.diceDisplay}</p>\n          <button onClick={this.diceThrow} className=\"button\">\n            Dice Roll!\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameBoard;\n","import React, { Component } from \"react\";\n\nimport PlayersDisplay from \"./components/PlayersDisplay\";\nimport Footer from \"./components/Footer\";\nimport Instructions from \"./components/Instructions\";\n\nimport CharacterSelection from \"./containers/CharacterSelection\";\nimport GameBoard from \"./containers/GameBoard\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    players: [],\n    gameStarted: false,\n    displayInstruction: false,\n    currentPlayer: null,\n    tile: null,\n  };\n\n  toggleInstruction = (event) => {\n    this.setState({\n      displayInstruction: !this.state.displayInstruction,\n    });\n  };\n\n  startGame = (players) => {\n    this.setState({\n      players: players.map((player) => ({\n        ...player,\n        position: 0,\n        score: 0,\n      })),\n      gameStarted: true,\n      currentPlayer: players[0],\n    });\n  };\n\n  movePlayer = (number, tiles) => {\n    this.setState((prevState) => {\n      let currentPlayer = prevState.players.find(\n        (player) => player.number === prevState.currentPlayer.number\n      );\n\n      const position = currentPlayer.position + number;\n      const landingTile = tiles[position % tiles.length];\n      const increaseScore = (function () {\n        if (landingTile.type === currentPlayer.character) {\n          return 2;\n        } else if (landingTile.type === \"Start\") {\n          return 0;\n        } else if (landingTile.type !== \"Fields of Destiny\") {\n          return -1;\n        } else {\n          return Math.floor(2 * Math.random()) === 0 ? 1 : -1;\n        }\n      })();\n\n      currentPlayer = {\n        ...currentPlayer,\n        position: currentPlayer.position + number,\n        score: Math.max(0, currentPlayer.score + increaseScore),\n      };\n\n      const tile = {\n        player: currentPlayer,\n        type: landingTile.type,\n        points: (increaseScore >= 0 ? \"+\" : \"\") + increaseScore,\n      };\n\n      return {\n        tile,\n        players: prevState.players.map((player) =>\n          player.number === prevState.currentPlayer.number\n            ? currentPlayer\n            : player\n        ),\n        currentPlayer:\n          prevState.currentPlayer.number === prevState.players[0].number\n            ? prevState.players[1]\n            : prevState.players[0],\n      };\n    });\n  };\n  render() {\n    return (\n      <>\n        <div class=\"header\">\n          <button\n            onClick={(event) => {\n              this.toggleInstruction(event);\n            }}\n            className=\"inverted-button\"\n          >\n            Instructions\n          </button>\n          <h1>Draconid Wars</h1>\n          <a\n            className=\"inverted-button\"\n            style={{ textDecoration: \"none\" }}\n            href=\"\"\n          >\n            Restart Game\n          </a>\n        </div>\n        {this.state.displayInstruction ? (\n          <Instructions\n            onClose={this.toggleInstruction}\n            displayInstruction={this.state.displayInstruction}\n          />\n        ) : (\n          <div className=\"App\">\n            <PlayersDisplay\n              players={this.state.players}\n              getPlayerRace={(currentPlayerNumber) =>\n                currentPlayerNumber === 1 ? \"Humanoid\" : \"Draconem\"\n              }\n              onIntroScreen={false}\n            />\n            {this.state.gameStarted ? (\n              <>\n                <GameBoard\n                  players={this.state.players}\n                  currentPlayer={this.state.currentPlayer}\n                  tile={this.state.tile}\n                  gameOver={this.state.gameOver}\n                  movePlayer={this.movePlayer}\n                />\n              </>\n            ) : (\n              <CharacterSelection startGame={this.startGame} />\n            )}\n          </div>\n        )}\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}