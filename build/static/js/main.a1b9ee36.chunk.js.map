{"version":3,"sources":["components/PlayersDisplay.jsx","components/Footer.jsx","components/Instructions.jsx","containers/CharacterSelection.jsx","containers/GameBoard.jsx","App.jsx","index.js"],"names":["PlayersDisplay","players","getPlayerRace","onIntroScreen","className","map","player","style","textAlign","number","textDecoration","src","character","alt","fontFamily","score","Footer","class","role","aria-label","color","href","Instructions","state","characters","tiles","onClose","event","props","this","displayInstruction","justifyContent","alignItems","width","height","tile","onClick","Component","CharacterSelection","Dragon","Humanoid","currentPlayerNumber","readyToStart","setPlayer","setState","prevState","startGame","GameBoard","boardSideSize","diceThrow","choice","Math","floor","random","diceDisplay","movePlayer","tileGenerator","row_index","col_index","type","index","boardTiles","length","push","traversalPathLength","positions","position","gridTemplateRows","gridTemplateColumns","gridRow","gridColumn","transition","points","currentPlayer","App","gameStarted","toggleInstruction","find","landingTile","increaseScore","max","gameOver","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1b9ee36.chunk.js","sourcesContent":["import React from \"react\";\n\nconst PlayersDisplay = ({ players, getPlayerRace, onIntroScreen }) => (\n  <div className=\"players\">\n    {players.map((player) => (\n      <div key={player.number}>\n        <h3 style={{ textAlign: \"center\" }}>\n          {getPlayerRace(player.number)} Hero\n        </h3>\n        {onIntroScreen === true ? (\n          <button\n            className=\"character character-display\"\n            style={{ textDecoration: \"none\" }}\n          >\n            <img\n              className=\"character-image\"\n              src={`./characters/${player.character}.png`}\n              alt={player.character}\n            />\n            <div style={{ textAlign: \"center\", fontFamily: \"Space Mono\" }}>\n              {player.character}\n            </div>\n            <p className=\"player-score\">{player.score}</p>\n          </button>\n        ) : (\n          <button\n            className=\"character character-intro\"\n            style={{ textDecoration: \"none\" }}\n          >\n            <img\n              className=\"character-image\"\n              src={`./characters/${player.character}.png`}\n              alt={player.character}\n            />\n            <div style={{ textAlign: \"center\", fontFamily: \"Space Mono\" }}>\n              {player.character}\n            </div>\n            <p className=\"player-score\">{player.score}</p>\n          </button>\n        )}\n      </div>\n    ))}\n  </div>\n);\n\nexport default PlayersDisplay;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div class=\"footer\">\n      <h5>\n        Created with{\" \"}\n        <span role=\"img\" aria-label=\"heart\">\n          ❤️\n        </span>{\" \"}\n        by{\" \"}\n        <a style={{ color: \"white\" }} href=\"https://www.adityavsingh.com/\">\n          Aditya Vikram Singh\n        </a>\n        , 2020\n      </h5>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\n\nclass Instructions extends Component {\n  state = {\n    characters: [\n      \"Ancient Wizard\",\n      \"Mighty Knight\",\n      \"Stealthy Rogue\",\n      \"Baneful Blue Dragon\",\n      \"Fiery Red Dragon\",\n      \"Noxious Green Dragon\",\n    ],\n    tiles: [\n      \"Mythic Kingdom of Friendship\",\n      \"Ancient Wizard\",\n      \"Mighty Knight\",\n      \"Stealthy Rogue\",\n      \"Baneful Blue Dragon\",\n      \"Fiery Red Dragon\",\n      \"Noxious Green Dragon\",\n      \"Fields of Destiny\",\n    ],\n  };\n\n  onClose = (event) => {\n    this.props.onClose(event);\n  };\n  render() {\n    if (!this.props.displayInstruction) {\n      return null;\n    }\n    return (\n      <div class=\"instructions\">\n        <h2 style={{ textAlign: \"center\" }}>Game Instructions</h2>\n        <br />\n        <br />\n        <div class=\"content\">\n          <ul\n            style={{\n              textAlign: \"center\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            {this.state.characters.map((character) => (\n              <img\n                className=\"character\"\n                src={`./characters/${character}.png`}\n                width=\"75px\"\n                height=\"auto\"\n                alt={character}\n              />\n            ))}\n          </ul>\n          <ul\n            style={{\n              textAlign: \"center\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            {this.state.tiles.map((tile) => (\n              <img\n                className=\"character\"\n                src={`./tiles/${tile}.jpg`}\n                width=\"75px\"\n                height=\"auto\"\n                alt={tile}\n              />\n            ))}\n          </ul>\n          <ul>\n            <li>The first player chooses a Humanoid character.</li>\n            <li>The second player chooses a Dragon character.</li>\n            <li>\n              The Board appears, and Humanoid character begins by rolling a die!\n            </li>\n            <li>\n              The player moves ahead the same number of tiles as the number on\n              the die.\n              <ul>\n                <li>\n                  If the player lands on their own tile, then their score is\n                  incremented by 3.\n                </li>\n                <li>\n                  If the player lands on their opponent's tile, then their score\n                  is decremented by 1.\n                </li>\n                <li>\n                  If the player lands on Fields of Destiny, they have an equal\n                  chance of gaining or losing 2 points.\n                </li>\n                <li>\n                  If the player lands on Mythic Kingdom of Friendship (start),\n                  the player's score is not affected.\n                </li>\n              </ul>\n            </li>\n            <li>The first player to reach 20 points wins the game!</li>\n          </ul>\n        </div>\n        <br />\n        <br />\n        <div>\n          <button class=\"inverted-button\" onClick={this.onClose}>\n            Close Instructions\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Instructions;\n","import React, { Component, Fragment } from \"react\";\nimport PlayersDisplay from \"../components/PlayersDisplay\";\n\nclass CharacterSelection extends Component {\n  state = {\n    characters: {\n      Dragon: [\n        \"Baneful Blue Dragon\",\n        \"Fiery Red Dragon\",\n        \"Noxious Green Dragon\",\n      ],\n      Humanoid: [\"Ancient Wizard\", \"Mighty Knight\", \"Stealthy Rogue\"],\n    },\n    currentPlayerNumber: 1,\n    players: [],\n    readyToStart: false,\n  };\n\n  setPlayer = (character) => {\n    this.setState((prevState) => ({\n      currentPlayerNumber: prevState.currentPlayerNumber + 1,\n      players: [\n        ...prevState.players,\n        { number: prevState.currentPlayerNumber, character },\n      ],\n      readyToStart: prevState.currentPlayerNumber === 2 ? true : false,\n    }));\n  };\n\n  getPlayerRace = (currentPlayerNumber) =>\n    currentPlayerNumber === 1 ? \"Humanoid\" : \"Dragon\";\n\n  startGame = () => {\n    this.props.startGame(this.state.players);\n  };\n\n  render() {\n    return (\n      <div>\n        <PlayersDisplay\n          players={this.state.players}\n          getPlayerRace={this.getPlayerRace}\n          onIntroScreen={true}\n        />\n        {this.state.readyToStart ? (\n          <Fragment>\n            <button onClick={this.startGame} className=\"button\">\n              Start Game\n            </button>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <h1 style={{ textAlign: \"center\" }}>\n              {this.getPlayerRace(this.state.currentPlayerNumber)} race, choose\n              your hero:\n            </h1>\n            {this.state.characters[\n              this.getPlayerRace(this.state.currentPlayerNumber)\n            ].map((character) => (\n              <button\n                className=\"character\"\n                onClick={() => this.setPlayer(character)}\n                style={{ textDecoration: \"none\" }}\n                key={character}\n              >\n                <img\n                  className=\"character-image\"\n                  src={`./characters/${character}.png`}\n                  alt={character}\n                />\n                <div style={{ textAlign: \"center\" }}>{character}</div>\n              </button>\n            ))}\n          </Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default CharacterSelection;\n","import React, { Component } from \"react\";\n\nclass GameBoard extends Component {\n  state = {\n    // Side length of Board as 11 units ensures a total of 40 traversable tiles.\n    boardSideSize: 8,\n    // Array to hold tile objects\n    tiles: [],\n  };\n\n  componentDidMount() {\n    // Assign the tiles generated to array\n    const tiles = this.tileGenerator();\n    // Update the state with newly assigned tiles\n    this.setState({\n      tiles,\n    });\n  }\n\n  tileGenerator() {\n    // Destructuring construct to obtain Humanoid and Dragon characters from props\n    const {\n      players: [Humanoid, Dragon],\n    } = this.props;\n    // Initializing board tiles with starting tile\n    const tiles = [\n      {\n        row_index: 1,\n        col_index: 1,\n        type: \"Start\",\n      },\n    ];\n    // Destructuring construct to obtain length of board from state\n    const { boardSideSize } = this.state;\n    // Array-based group assignment for index, row_index and col_index from tile right after the starting one\n    let [index, row_index, col_index] = [1, 1, 2];\n    // Calculating total number of corner and edge tiles on board using 4*(side-1) rule\n    const boardTiles = 4 * (boardSideSize - 1);\n    // Loop for traversing through the tiles and adding them to tiles array\n    while (tiles.length < boardTiles) {\n      // Generated tile from indices\n      const tile = {\n        row_index,\n        col_index,\n      };\n\n      // Assignment of the type of tile based on equal distribution of all three kinds of tiles among 39 tiles (13 of each kind)\n      tile.type =\n        index % 3 === 0\n          ? \"Fields of Destiny\"\n          : index % 3 === 1\n          ? Humanoid.character\n          : Dragon.character;\n\n      // Finally push the new tile to array of tiles\n      tiles.push(tile);\n      // Increment the index for while loop\n      ++index;\n      // Travel path would be boardSideSize - 1 as it would reach corner and turn\n      const traversalPathLength = boardSideSize - 1;\n      // Based on index, change the row_index and col_index\n      if (index <= traversalPathLength) {\n        ++col_index;\n      } else if (index <= 2 * traversalPathLength) {\n        ++row_index;\n      } else if (index <= 3 * traversalPathLength) {\n        --col_index;\n      } else {\n        --row_index;\n      }\n    }\n\n    // Return the array of tiles after complete generation\n    return tiles;\n  }\n\n  diceThrow = () => {\n    const choice = Math.floor(6 * Math.random()) + 1;\n    const diceDisplay = choice;\n    this.setState({\n      diceDisplay,\n    });\n    this.props.movePlayer(choice, this.state.tiles);\n  };\n\n  render() {\n    const { boardSideSize } = this.state;\n    let positions = [];\n    if (this.state.tiles.length > 0) {\n      positions = this.props.players.map(\n        (player) => this.state.tiles[player.position % this.state.tiles.length]\n      );\n    }\n    return (\n      <div\n        className=\"game-board\"\n        style={{\n          gridTemplateRows: `repeat(${boardSideSize}, 1fr)`,\n          gridTemplateColumns: `repeat(${boardSideSize}, 1fr)`,\n        }}\n      >\n        {this.state.tiles.map((tile, index) => (\n          <div\n            className=\"game-tile\"\n            style={{\n              gridRow: tile.row_index,\n              gridColumn: tile.col_index,\n            }}\n            key={index}\n          >\n            {tile.type !== \"Start\" ? (\n              <img alt={tile.type} src={`./tiles/${tile.type}.jpg`} />\n            ) : (\n              <img\n                alt=\"Start\"\n                src={\"./tiles/Mythic Kingdom of Friendship.jpg\"}\n              />\n            )}\n          </div>\n        ))}\n        {positions.map((position, index) => {\n          const player = this.props.players[index];\n          return (\n            <div\n              className=\"player-character\"\n              key={player.number}\n              style={{\n                gridRow: position.row_index,\n                gridColumn: position.col_index,\n                transition: `all 1s`,\n              }}\n            >\n              <img\n                className=\"character-image\"\n                alt={player.number}\n                src={`./characters/${player.character}.png`}\n              />\n            </div>\n          );\n        })}\n        <div className=\"board-center\">\n          {this.props.tile ? (\n            <div\n              style={{\n                textAlign: \"center\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <h3>\n                {this.props.tile.player.character}:{this.props.tile.points}{\" \"}\n                score\n              </h3>\n              <br />\n              <h5>\n                {this.props.tile.player.character} reached\n                <br />\n                {this.props.tile.type}'s stronghold!\n              </h5>\n              <br />\n            </div>\n          ) : (\n            \"\"\n          )}\n          {this.props.tile && this.props.tile.player.score >= 20 ? (\n            <div\n              style={{\n                textAlign: \"center\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <img\n                className=\"character-image\"\n                src={`./characters/${this.props.tile.player.character}.png`}\n                alt={this.props.tile.player.character}\n              />\n              <h3>{this.props.tile.player.character} won!</h3>\n            </div>\n          ) : (\n            <>\n              <h5> {this.props.currentPlayer.character}, roll the dice! 🎲</h5>\n              {this.state.diceDisplay ? (\n                <img\n                  className=\"dice-thrown\"\n                  src={`./dice/${this.state.diceDisplay}.png`}\n                  alt={this.state.diceDisplay}\n                />\n              ) : (\n                \"\"\n              )}\n              <button onClick={this.diceThrow} className=\"button\">\n                Dice Roll!\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameBoard;\n","import React, { Component } from \"react\";\n\nimport PlayersDisplay from \"./components/PlayersDisplay.jsx\";\nimport Footer from \"./components/Footer.jsx\";\nimport Instructions from \"./components/Instructions.jsx\";\n\nimport CharacterSelection from \"./containers/CharacterSelection.jsx\";\nimport GameBoard from \"./containers/GameBoard.jsx\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    players: [],\n    gameStarted: false,\n    displayInstruction: false,\n    currentPlayer: null,\n    tile: null,\n  };\n\n  toggleInstruction = (event) => {\n    this.setState({\n      displayInstruction: !this.state.displayInstruction,\n    });\n  };\n\n  startGame = (players) => {\n    this.setState({\n      players: players.map((player) => ({\n        ...player,\n        position: 0,\n        score: 0,\n      })),\n      gameStarted: true,\n      currentPlayer: players[0],\n    });\n  };\n\n  movePlayer = (number, tiles) => {\n    this.setState((prevState) => {\n      let currentPlayer = prevState.players.find((player) => player.number === prevState.currentPlayer.number);\n\n      const position = currentPlayer.position + number;\n      const landingTile = tiles[position % tiles.length];\n      const increaseScore = (function () {\n        if (landingTile.type === currentPlayer.character) {\n          return 3;\n        } else if (landingTile.type === \"Start\") {\n          return 0;\n        } else if (landingTile.type !== \"Fields of Destiny\") {\n          return -1;\n        } else {\n          return Math.floor(2 * Math.random()) === 0 ? 2 : -2;\n        }\n      })();\n\n      currentPlayer = {\n        ...currentPlayer,\n        position: currentPlayer.position + number,\n        score: Math.max(0, currentPlayer.score + increaseScore),\n      };\n\n      const tile = {\n        player: currentPlayer,\n        type: landingTile.type,\n        points: (increaseScore >= 0 ? \"+\" : \"\") + increaseScore,\n      };\n\n      return {\n        tile,\n        players: prevState.players.map((player) =>\n          player.number === prevState.currentPlayer.number ? currentPlayer : player\n        ),\n        currentPlayer:\n          prevState.currentPlayer.number === prevState.players[0].number ? prevState.players[1] : prevState.players[0],\n      };\n    });\n  };\n  render() {\n    return (\n      <>\n        <div class=\"header\">\n          <button\n            onClick={(event) => {\n              this.toggleInstruction(event);\n            }}\n            className=\"inverted-button\"\n          >\n            Instructions\n          </button>\n          <h1>Perpetual Crusades</h1>\n          {/*eslint-disable-next-line*/}\n          <a className=\"inverted-button\" style={{ textDecoration: \"none\" }} href=\"\">\n            Restart Game\n          </a>\n        </div>\n        {this.state.displayInstruction ? (\n          <Instructions onClose={this.toggleInstruction} displayInstruction={this.state.displayInstruction} />\n        ) : (\n          <div className=\"App\">\n            <PlayersDisplay\n              players={this.state.players}\n              getPlayerRace={(currentPlayerNumber) => (currentPlayerNumber === 1 ? \"Humanoid\" : \"Dragon\")}\n              onIntroScreen={false}\n            />\n            {this.state.gameStarted ? (\n              <>\n                <GameBoard\n                  players={this.state.players}\n                  currentPlayer={this.state.currentPlayer}\n                  tile={this.state.tile}\n                  gameOver={this.state.gameOver}\n                  movePlayer={this.movePlayer}\n                />\n              </>\n            ) : (\n              <CharacterSelection startGame={this.startGame} />\n            )}\n          </div>\n        )}\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}